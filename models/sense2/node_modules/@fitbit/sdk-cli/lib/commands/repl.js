"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function repl(stores) {
    return (cli) => {
        const { hostConnections } = stores;
        const isHostConnected = (host) => host && !host.host.rpc.ended;
        const exitWithError = (message) => {
            cli.activeCommand.log(message);
            cli._exitMode({
                sessionId: cli.session.id,
            });
        };
        let uuid;
        cli
            .mode('repl device [uuid]')
            .types({ string: ['uuid'] })
            .description('Enter into a REPL with the connected device')
            .delimiter('repl$')
            .init((async (args) => {
            const hostConnection = stores.hostConnections.appHost;
            if (!isHostConnected(hostConnection)) {
                return exitWithError('No device connected');
            }
            if (!hostConnection.host.hasEvalSupport()) {
                return exitWithError('Connected device does not support REPL');
            }
            uuid = args.uuid;
            if (uuid) {
                cli.activeCommand.log(`Targeting REPL to UUID: ${uuid}`);
            }
            cli.activeCommand.log('Entering REPL mode, type "exit" to quit');
        }))
            .action(async (command) => {
            const hostConnection = hostConnections.appHost;
            if (!isHostConnected(hostConnection)) {
                cli.activeCommand.log('Host disconnected, exiting REPL');
                cli.execSync('exit');
                return;
            }
            try {
                const result = await hostConnection.host.eval(command, uuid);
                if (result.success)
                    cli.activeCommand.log(result.value);
            }
            catch (ex) {
                cli.activeCommand.log(ex);
            }
        });
    };
}
exports.default = repl;
//# sourceMappingURL=repl.js.map