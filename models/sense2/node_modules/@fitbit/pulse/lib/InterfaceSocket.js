"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var events_1 = (0, tslib_1.__importDefault)(require("events"));
/*
  A socket for sending and receiving link-layer packets over a
  PULSE interface.

  Available events:
   - close
   - data
*/
var InterfaceSocket = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(InterfaceSocket, _super);
    function InterfaceSocket(intf, protocol) {
        var _this = _super.call(this) || this;
        _this.intf = intf;
        _this.protocol = protocol;
        _this.closed = false;
        return _this;
    }
    InterfaceSocket.prototype.send = function (packet) {
        if (this.closed)
            throw new Error('I/O operation on closed socket');
        this.intf.sendPacket(this.protocol, packet);
    };
    InterfaceSocket.prototype.handlePacket = function (packet) {
        if (!this.closed)
            this.emit('data', packet);
    };
    InterfaceSocket.prototype.close = function () {
        if (this.closed)
            return;
        this.closed = true;
        this.emit('close');
        this.intf.unregisterSocket(this.protocol);
        this.removeAllListeners();
    };
    return InterfaceSocket;
}(events_1.default));
exports.default = InterfaceSocket;
//# sourceMappingURL=InterfaceSocket.js.map