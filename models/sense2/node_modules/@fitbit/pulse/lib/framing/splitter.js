"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameSplitter = void 0;
var tslib_1 = require("tslib");
var stream = (0, tslib_1.__importStar)(require("stream"));
var _1 = require(".");
var FrameSplitter = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(FrameSplitter, _super);
    /*
    Takes a byte stream and partitions it into frames (object mode stream output).
  
    Empty frames (two consecutive flag bytes) are silently discarded.
    No transparency conversion is applied to the contents of the frames.
    */
    function FrameSplitter(maxFrameLength) {
        var _this = _super.call(this, {
            readableObjectMode: true,
            writableObjectMode: false,
        }) || this;
        _this.maxFrameLength = maxFrameLength;
        _this.waitingForSync = true;
        _this.frame = [];
        return _this;
    }
    FrameSplitter.prototype._write = function (chunk, _, done) {
        var e_1, _a;
        try {
            for (var _b = (0, tslib_1.__values)(chunk.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var byte = _c.value;
                if (this.waitingForSync) {
                    if (byte === _1.flag) {
                        this.waitingForSync = false;
                    }
                }
                else {
                    if (byte === _1.flag) {
                        if (this.frame.length > 0) {
                            this.push(new Uint8Array(this.frame));
                            this.frame = [];
                        }
                    }
                    else {
                        if (this.maxFrameLength === undefined ||
                            this.frame.length < this.maxFrameLength) {
                            this.frame.push(byte);
                        }
                        else {
                            this.frame = [];
                            this.waitingForSync = true;
                        }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        done();
    };
    return FrameSplitter;
}(stream.Transform));
exports.FrameSplitter = FrameSplitter;
//# sourceMappingURL=splitter.js.map