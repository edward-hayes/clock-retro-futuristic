"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameEncoder = exports.encode = void 0;
var tslib_1 = require("tslib");
var stream = (0, tslib_1.__importStar)(require("stream"));
var crc_32_1 = require("crc-32");
var cobs = (0, tslib_1.__importStar)(require("./cobs"));
var _1 = require(".");
function encode(data) {
    var fcs = Buffer.alloc(4);
    fcs.writeInt32LE((0, crc_32_1.buf)(data));
    var encoded = cobs.encode(Buffer.concat([data, fcs]));
    var flagBytes = new Uint8Array([_1.flag]);
    return Buffer.concat([flagBytes, encoded, flagBytes]);
}
exports.encode = encode;
var FrameEncoder = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(FrameEncoder, _super);
    /*
    Takes an object stream with each object comprising a buffer with data to be framed.
    It is output with COBS encoding and FCS appended.
    */
    function FrameEncoder() {
        return _super.call(this, { writableObjectMode: true, allowHalfOpen: false }) || this;
    }
    FrameEncoder.prototype._transform = function (chunk, _, callback) {
        try {
            callback(null, encode(chunk));
        }
        catch (ex) {
            /* istanbul ignore next */
            callback(ex);
        }
    };
    return FrameEncoder;
}(stream.Transform));
exports.FrameEncoder = FrameEncoder;
//# sourceMappingURL=encoder.js.map