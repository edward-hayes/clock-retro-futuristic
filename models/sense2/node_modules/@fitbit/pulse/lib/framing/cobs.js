"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.decode = exports.encode = void 0;
var flag = 0xff;
function encode(input) {
    var maxOverhead = Math.ceil(input.byteLength / (flag - 1));
    var output = Buffer.alloc(input.byteLength + maxOverhead);
    var inputPtr = 0;
    var outputPtr = 1;
    var codePtr = 0;
    var code = 1;
    while (inputPtr < input.byteLength) {
        var byte = input[inputPtr++];
        if (byte !== 0) {
            output[outputPtr++] = byte;
            code++;
        }
        if (byte === 0 || code === flag) {
            output[codePtr] = code;
            code = 1;
            codePtr = outputPtr;
            if (byte === 0 || inputPtr < input.byteLength) {
                outputPtr++;
            }
        }
    }
    output[codePtr] = code;
    return output.slice(0, outputPtr);
}
exports.encode = encode;
function decode(input) {
    var output = Buffer.alloc(input.byteLength);
    var inputPtr = 0;
    var outputPtr = 0;
    var code = flag;
    var block = 0;
    while (inputPtr < input.byteLength) {
        if (input[inputPtr] === 0) {
            throw new Error("Unexpected zero in COBS data at index ".concat(inputPtr));
        }
        if (block !== 0) {
            output[outputPtr++] = input[inputPtr++];
        }
        else {
            if (code != flag) {
                output[outputPtr++] = 0;
            }
            block = code = input[inputPtr++];
        }
        block--;
    }
    if (block > 0) {
        throw new Error("End of COBS data but ".concat(block, " more bytes expected"));
    }
    return output.slice(0, outputPtr);
}
exports.decode = decode;
//# sourceMappingURL=cobs.js.map