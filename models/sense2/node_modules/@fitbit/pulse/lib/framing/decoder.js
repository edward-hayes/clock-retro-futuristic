"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameDecoder = exports.stripFCS = exports.decodeTransparency = void 0;
var tslib_1 = require("tslib");
var stream = (0, tslib_1.__importStar)(require("stream"));
var crc_32_1 = require("crc-32");
var cobs = (0, tslib_1.__importStar)(require("./cobs"));
var _1 = require(".");
var crc32Residue = (0, crc_32_1.buf)(new Uint8Array(4));
function decodeTransparency(data) {
    if (data.indexOf(_1.flag) !== -1) {
        throw new Error('Flag byte in encoded frame');
    }
    return cobs.decode(data);
}
exports.decodeTransparency = decodeTransparency;
function stripFCS(data) {
    if (data.length <= 4) {
        throw new Error('Frame too short');
    }
    if ((0, crc_32_1.buf)(data) != crc32Residue) {
        throw new Error('FCS check failure');
    }
    return data.slice(0, data.length - 4);
}
exports.stripFCS = stripFCS;
var FrameDecoder = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(FrameDecoder, _super);
    /*
    Takes an object stream with each object comprising a buffer mapping to a single frame,
    and emits a corresponding decoded frame (FCS checked, transparency removed)
    */
    function FrameDecoder() {
        return _super.call(this, { readableObjectMode: true, allowHalfOpen: false }) || this;
    }
    FrameDecoder.prototype._transform = function (chunk, _, callback) {
        try {
            callback(null, stripFCS(decodeTransparency(chunk)));
        }
        catch (ex) {
            callback(ex);
        }
    };
    return FrameDecoder;
}(stream.Transform));
exports.FrameDecoder = FrameDecoder;
//# sourceMappingURL=decoder.js.map