/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import EventEmitter from 'events';
import Transport from '../transports';
export declare enum PCMPCode {
    EchoRequest = 1,
    EchoReply = 2,
    DiscardRequest = 3,
    PortClosed = 129,
    UnknownCode = 130
}
export default class PulseControlMessageProtocol extends EventEmitter {
    private transport;
    readonly port = 1;
    readonly mtu = 0;
    closed: boolean;
    private pingAttemptsRemaining;
    private pingPromiseResolve?;
    private pingPromiseReject?;
    private pingTimer?;
    private pingTimeout;
    constructor(transport: Transport);
    close(): void;
    private sendUnknownCode;
    private sendEchoRequest;
    private sendEchoReply;
    onReceive(rawPacket: Buffer): void;
    ping(attempts?: number, timeout?: number): Promise<void>;
    private resetPingTimer;
    private pingTimerExpired;
    send(data: Buffer): void;
}
