"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var events_1 = (0, tslib_1.__importDefault)(require("events"));
var transports_1 = require("./transports");
var Link = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(Link, _super);
    function Link(intf, mtu, requestedTransports) {
        var e_1, _a;
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.transports = {};
        try {
            for (var _b = (0, tslib_1.__values)(Object.entries(transports_1.transports)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = (0, tslib_1.__read)(_c.value, 2), name_1 = _d[0], transportCtor = _d[1];
                if (requestedTransports &&
                    !requestedTransports.includes(name_1)) {
                    continue;
                }
                _this.transports[name_1] = new transportCtor(intf, mtu);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return _this;
    }
    Link.prototype.openSocket = function (transportName, port, timeout) {
        if (timeout === void 0) { timeout = 30000; }
        if (this.closed)
            throw new Error('Cannot open socket on closed link');
        var transport = this.transports[transportName];
        if (transport === undefined) {
            throw new Error("Unknown transport \"".concat(transportName, "\""));
        }
        return transport.openSocket(port, timeout);
    };
    Link.prototype.down = function () {
        var e_2, _a;
        this.closed = true;
        this.emit('close');
        try {
            for (var _b = (0, tslib_1.__values)(Object.values(this.transports)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var transport = _c.value;
                transport.down();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    return Link;
}(events_1.default));
exports.default = Link;
//# sourceMappingURL=Link.js.map