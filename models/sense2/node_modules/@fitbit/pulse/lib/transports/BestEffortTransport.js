"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BestEffortPacket_1 = (0, tslib_1.__importDefault)(require("./BestEffortPacket"));
var BaseTransport_1 = (0, tslib_1.__importDefault)(require("./BaseTransport"));
var BestEffortTransport = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(BestEffortTransport, _super);
    function BestEffortTransport(intf, linkMtu) {
        var _this = _super.call(this, intf) || this;
        _this._mtu = linkMtu - 4;
        var ctor = _this.constructor;
        _this.linkSocket = intf.connect(ctor.protocolNumber);
        _this.linkSocket.on('data', _this.packetReceived.bind(_this));
        return _this;
    }
    BestEffortTransport.prototype.thisLayerUp = function () {
        var _this = this;
        var _a;
        _super.prototype.thisLayerUp.call(this);
        // Don't need to do anything in the success case as receiving
        // any packet is enough to set the transport as Opened.
        (_a = this.pcmp) === null || _a === void 0 ? void 0 : _a.ping().catch(function () {
            var _a;
            console.warn('Ping check failed, restarting transport.');
            (_a = _this.ncp) === null || _a === void 0 ? void 0 : _a.restart();
        });
    };
    BestEffortTransport.prototype.send = function (port, information) {
        _super.prototype.send.call(this, port, information);
        var packet = BestEffortPacket_1.default.build(port, information);
        this.linkSocket.send(packet);
    };
    BestEffortTransport.prototype.packetReceived = function (packet) {
        var _a;
        if (this.closed) {
            // This shouldn't be possible because the link socket is closed
            // by the transport going down
            /* istanbul ignore next */
            return console.warn('Received packet on closed transport');
        }
        if (!((_a = this.ncp) === null || _a === void 0 ? void 0 : _a.isOpened())) {
            console.warn('Received packet before the transport is open. Discarding.');
            return;
        }
        this.opened.set();
        var fields;
        try {
            fields = BestEffortPacket_1.default.parse(packet);
        }
        catch (_b) {
            console.error("Received malformed ".concat(this.constructor.displayName, " packet"));
            return;
        }
        var socket = this.sockets[fields.port];
        if (socket !== undefined) {
            socket.onReceive(fields.information);
        }
        else {
            console.warn("Received packet for unopened port 0x".concat(fields.port.toString(16)));
        }
    };
    BestEffortTransport.prototype.down = function () {
        _super.prototype.down.call(this);
        this.linkSocket.close();
    };
    BestEffortTransport.displayName = 'BEAT';
    BestEffortTransport.ncpProtocolNumber = 0xba29;
    BestEffortTransport.protocolNumber = 0x3a29;
    return BestEffortTransport;
}(BaseTransport_1.default));
exports.default = BestEffortTransport;
//# sourceMappingURL=BestEffortTransport.js.map