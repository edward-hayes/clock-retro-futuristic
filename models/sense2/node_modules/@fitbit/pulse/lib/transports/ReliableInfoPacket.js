"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ReliableInfoPacket = /** @class */ (function () {
    function ReliableInfoPacket(sequenceNumber, ackNumber, poll, port, information) {
        this.sequenceNumber = sequenceNumber;
        this.ackNumber = ackNumber;
        this.poll = poll;
        this.port = port;
        this.information = information;
    }
    ReliableInfoPacket.parse = function (packet) {
        if (packet.byteLength < ReliableInfoPacket.headerSize) {
            throw new Error('Packet truncated or corrupt');
        }
        var offset = 0;
        var tmp = packet.readUInt8(offset++);
        var sequenceNumber = tmp >> 1;
        var isSupervisory = (tmp & 1) === 1;
        tmp = packet.readUInt8(offset++);
        var ackNumber = tmp >> 1;
        var poll = (tmp & 1) === 1;
        var port = packet.readUInt16BE(offset);
        offset += 2;
        var length = packet.readUInt16BE(offset);
        offset += 2;
        var information = packet.slice(offset, (offset += length - ReliableInfoPacket.headerSize));
        if (information.byteLength + ReliableInfoPacket.headerSize != length) {
            throw new Error('Packet truncated or corrupt');
        }
        if (isSupervisory) {
            throw new Error('isSupervisory must be false for a ReliableInfoPacket, but was true');
        }
        return new ReliableInfoPacket(sequenceNumber, ackNumber, poll, port, information);
    };
    ReliableInfoPacket.build = function (sequenceNumber, ackNumber, poll, port, information) {
        if (information === void 0) { information = Buffer.alloc(0); }
        var buf = Buffer.alloc(information.byteLength + ReliableInfoPacket.headerSize);
        var offset = 0;
        buf.writeUInt8(sequenceNumber << 1, offset++);
        buf.writeUInt8((ackNumber << 1) | (poll ? 1 : 0), offset++);
        buf.writeUInt16BE(port, offset);
        offset += 2;
        buf.writeUInt16BE(information.byteLength + ReliableInfoPacket.headerSize, offset);
        information.copy(buf, (offset += 2));
        return buf;
    };
    ReliableInfoPacket.headerSize = 6;
    return ReliableInfoPacket;
}());
exports.default = ReliableInfoPacket;
//# sourceMappingURL=ReliableInfoPacket.js.map