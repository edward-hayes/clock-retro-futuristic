"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupervisoryPacketKind = void 0;
var SupervisoryPacketKind;
(function (SupervisoryPacketKind) {
    SupervisoryPacketKind[SupervisoryPacketKind["RR"] = 0] = "RR";
    SupervisoryPacketKind[SupervisoryPacketKind["RNR"] = 1] = "RNR";
    SupervisoryPacketKind[SupervisoryPacketKind["REJ"] = 2] = "REJ";
})(SupervisoryPacketKind = exports.SupervisoryPacketKind || (exports.SupervisoryPacketKind = {}));
var ReliableSupervisoryPacket = /** @class */ (function () {
    function ReliableSupervisoryPacket(kind, ackNumber, poll) {
        this.kind = kind;
        this.ackNumber = ackNumber;
        this.poll = poll;
    }
    ReliableSupervisoryPacket.parse = function (packet) {
        if (packet.byteLength !== ReliableSupervisoryPacket.headerSize) {
            throw new Error('Packet truncated or corrupt');
        }
        var offset = 0;
        var tmp = packet.readUInt8(offset++);
        var reserved = (tmp & 240) >> 4;
        var kind = (tmp & 12) >> 2;
        var isSupervisory = tmp & 3;
        tmp = packet.readUInt8(offset++);
        var ackNumber = tmp >> 1;
        var poll = (tmp & 1) === 1;
        if (reserved !== 0) {
            throw new Error("Reserved bits must be zero, but were: ".concat(reserved.toString(2)));
        }
        if (!isSupervisory) {
            throw new Error('isSupervisory must be true for a ReliableSupervisoryPacket, but was false');
        }
        return new ReliableSupervisoryPacket(kind, ackNumber, poll);
    };
    ReliableSupervisoryPacket.build = function (kind, ackNumber, poll) {
        var buf = Buffer.alloc(ReliableSupervisoryPacket.headerSize);
        var offset = 0;
        buf.writeUInt8((kind << 2) | 1, offset++);
        buf.writeUInt8((ackNumber << 1) | (poll ? 1 : 0), offset++);
        return buf;
    };
    ReliableSupervisoryPacket.headerSize = 2;
    return ReliableSupervisoryPacket;
}());
exports.default = ReliableSupervisoryPacket;
//# sourceMappingURL=ReliableSupervisoryPacket.js.map