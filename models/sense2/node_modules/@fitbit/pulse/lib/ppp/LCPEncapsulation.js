"use strict";
/**
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var LCPEncapsulation = /** @class */ (function () {
    function LCPEncapsulation(code, identifier, data, padding) {
        this.code = code;
        this.identifier = identifier;
        this.data = data;
        this.padding = padding;
    }
    LCPEncapsulation.parse = function (packet) {
        if (packet.byteLength < LCPEncapsulation.headerSize) {
            throw new Error('Packet truncated or corrupt');
        }
        var offset = 0;
        var code = packet.readUInt8(offset++);
        var identifier = packet.readUInt8(offset++);
        var length = packet.readUInt16BE(offset);
        offset += 2;
        var data = packet.slice(offset, (offset += length - LCPEncapsulation.headerSize));
        var padding = packet.slice(offset);
        if (data.byteLength + LCPEncapsulation.headerSize != length) {
            throw new Error('Packet truncated or corrupt');
        }
        return new LCPEncapsulation(code, identifier, data, padding);
    };
    LCPEncapsulation.build = function (code, identifier, data) {
        if (data === void 0) { data = Buffer.alloc(0); }
        var buf = Buffer.alloc(data.byteLength + LCPEncapsulation.headerSize);
        var offset = 0;
        buf.writeUInt8(code, offset++);
        buf.writeUInt8(identifier, offset++);
        buf.writeUInt16BE(data.byteLength + LCPEncapsulation.headerSize, offset);
        data.copy(buf, (offset += 2));
        return buf;
    };
    LCPEncapsulation.headerSize = 4;
    return LCPEncapsulation;
}());
exports.default = LCPEncapsulation;
//# sourceMappingURL=LCPEncapsulation.js.map